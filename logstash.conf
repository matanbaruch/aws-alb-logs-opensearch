input {
     s3 {
         bucket => "${BUCKET_NAME}"
         prefix => "${BUCKET_PREFIX}"
         region => "${BUCKET_REGION}"
         codec => "plain"
         type => "elb-logs"
     }
}

filter {
    # FILTER:  Formats the ingested ELB logs, assumes the field to parse is called 'message'
    if [type] == "elb-logs" {
      grok {
        match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb_name} %{IP:elb_client_ip}:%{INT:elb_client_port:int} (?:%{IP:elb_backend_ip}:%{NUMBER:elb_backend_port:int}|-) %{NUMBER:elb_request_processing_time:float} %{NUMBER:elb_backend_processing_time:float} %{NUMBER:elb_response_processing_time:float} (?:%{INT:elb_status_code:int}|-) (?:%{INT:elb_backend_status_code:int}|-) %{INT:elb_received_bytes:int} %{INT:elb_sent_bytes:int} \"(?:%{GREEDYDATA:elb_request}|-)\" \"(?:%{GREEDYDATA:elb_userAgent}|-)\" %{NOTSPACE:elb_sslcipher} %{NOTSPACE:elb_sslprotocol}"]
        match => ["message", "%{GREEDYDATA:elb_event_name} for ELB: %{NOTSPACE:elb_name} at %{TIMESTAMP_ISO8601:timestamp}"]
      }
      if [elb_request] =~ /.+/ {
        grok {
          match => ["elb_request", "(?:%{WORD:elb_http_method}) (?:%{DATA:elb_http_path})? (?:%{DATA:elb_http_type}/%{NUMBER:elb_http_version:float})?|%{GREEDYDATA:rawrequest}"]
        }
      }
      if [elb_http_path] =~ /.+/ {
        grok {
          match => ["elb_http_path", "(?:%{WORD:elb_http_path_protocol}://)?(%{NOTSPACE:elb_http_path_site}:)?(?:%{NUMBER:elb_http_path_port:int})?(?:%{GREEDYDATA:elb_http_path_url})?"]
        }
      }
    }
}

output {
  opensearch {
    id => "opensearch"
    hosts => ["${OPENSEARCH_HOST}:${OPENSEARCH_PORT}"]
    index => "logs"
  }
  stdout {
    id => "stdout"
    codec => json_lines
  }
}
